diff --git a/RecordTimer.py b/RecordTimer.py
index d3ccd75..e1c9c58 100755
--- a/RecordTimer.py
+++ b/RecordTimer.py
@@ -297,7 +297,7 @@ class RecordTimerEntry(timer.TimerEntry, object):
 				self.record_service = None
 			if self.afterEvent == AFTEREVENT.STANDBY:
 				if not Screens.Standby.inStandby: # not already in standby
-					Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A finished record timer wants to set your\nSTB to standby. Do that now?"), timeout = 20)
+					Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A finished record timer wants to set your\nSTB to idle server mode. Do that now?"), timeout = 20)
 			elif self.afterEvent == AFTEREVENT.DEEPSTANDBY:
 				if not Screens.Standby.inTryQuitMainloop: # not a shutdown messagebox is open
 					if Screens.Standby.inStandby: # in standby
diff --git a/SleepTimer.py b/SleepTimer.py
index a6f39ef..bb12b6d 100755
--- a/SleepTimer.py
+++ b/SleepTimer.py
@@ -11,7 +11,7 @@ import Screens.Standby
 
 config.SleepTimer = ConfigSubsection()
 config.SleepTimer.ask = ConfigYesNo(default = True)
-config.SleepTimer.action = ConfigSelection(default = "shutdown", choices = [("shutdown", _("shutdown")), ("standby", _("standby"))])
+config.SleepTimer.action = ConfigSelection(default = "shutdown", choices = [("shutdown", _("shutdown")), ("standby", _("idle server mode"))])
 
 class SleepTimerEntry(timer.TimerEntry):
 	def __init__(self, begin):
@@ -31,7 +31,7 @@ class SleepTimerEntry(timer.TimerEntry):
 					self.shutdown(True)
 			elif config.SleepTimer.action.value == "standby":
 				if config.SleepTimer.ask.value and not Screens.Standby.inStandby:
-					Notifications.AddNotificationWithCallback(self.standby, MessageBox, _("A sleep timer wants to set your\nSTB to standby. Do that now?"), timeout = 20)
+					Notifications.AddNotificationWithCallback(self.standby, MessageBox, _("A sleep timer wants to set your\nSTB to idle server mode. Do that now?"), timeout = 20)
 				else:
 					self.standby(True)
 
diff --git a/data/menu.xml b/data/menu.xml
index 03e582c..ccdd6d3 100755
--- a/data/menu.xml
+++ b/data/menu.xml
@@ -96,10 +96,10 @@ self.session.openWithCallback(msgClosed, FactoryReset)
 			<id val="shutdown" />
 			<!--<item text="Standby"><code>quitMainloop(0)</code></item>-->
 			<item text="Sleep Timer" entryID="sleep"><screen module="SleepTimerEdit" screen="SleepTimerEdit" /></item>
-			<item text="Standby" entryID="standby"><screen module="Standby" screen="Standby"/></item>
+			<item text="Idle Server Mode" entryID="standby"><screen module="Standby" screen="Standby"/></item>
 			<item text="Restart" entryID="restart"><screen module="Standby" screen="TryQuitMainloop">2</screen></item>
 			<item level="2" text="Restart GUI" entryID="restart_enigma"><screen module="Standby" screen="TryQuitMainloop">3</screen></item>
-			<item text="Deep Standby" requires="DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
+			<item text="Standby" requires="DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
 			<item text="Shutdown" requires="!DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
 		</menu>
 </menu>
diff --git a/data/setup.xml b/data/setup.xml
index 442fe13..719e94a 100755
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -63,7 +63,7 @@
 			<item level="2" text="Composition of the recording filenames">config.recording.filename_composition</item>
 		</setup>
 		<setup key="harddisk" title="Harddisk setup" >
-			<item level="0" text="Harddisk standby after">config.usage.hdd_standby</item>
+			<item level="0" text="Harddisk idle mode after">config.usage.hdd_standby</item>
 		</setup>
 		<setup key="network" title="Network setup">
 			<item text="Use DHCP">config.network.dhcp</item>
@@ -93,7 +93,7 @@
 		<setup key="lcd" title="Display Setup" requires="FrontpanelDisplay">
 			<item level="0" text="Brightness">config.lcd.bright</item>
 			<item level="0" text="Contrast">config.lcd.contrast</item>
-			<item level="0" text="Standby">config.lcd.standby</item>
+			<item level="0" text="Idle Server Mode">config.lcd.standby</item>
 		</setup>
 		<setup key="satconfig" title="Sat / Dish Setup">
 			<item text="Tuner Slot">config.sat.tunerslot</item>
diff --git a/lib/python/Components/ParentalControl.py b/lib/python/Components/ParentalControl.py
index 0ea65cd..2baadf9 100644
--- a/lib/python/Components/ParentalControl.py
+++ b/lib/python/Components/ParentalControl.py
@@ -26,8 +26,8 @@ def InitParentalControl():
 	config.ParentalControl = ConfigSubsection()
 	config.ParentalControl.configured = ConfigYesNo(default = False)
 	config.ParentalControl.mode = ConfigSelection(default = "simple", choices = [("simple", _("simple")), ("complex", _("complex"))])
-	config.ParentalControl.storeservicepin = ConfigSelection(default = "never", choices = [("never", _("never")), ("5", _("5 minutes")), ("30", _("30 minutes")), ("60", _("60 minutes")), ("standby", _("until standby/restart"))])
-	config.ParentalControl.storeservicepincancel = ConfigSelection(default = "never", choices = [("never", _("never")), ("5", _("5 minutes")), ("30", _("30 minutes")), ("60", _("60 minutes")), ("standby", _("until standby/restart"))])
+	config.ParentalControl.storeservicepin = ConfigSelection(default = "never", choices = [("never", _("never")), ("5", _("5 minutes")), ("30", _("30 minutes")), ("60", _("60 minutes")), ("standby", _("until idle server mode/restart"))])
+	config.ParentalControl.storeservicepincancel = ConfigSelection(default = "never", choices = [("never", _("never")), ("5", _("5 minutes")), ("30", _("30 minutes")), ("60", _("60 minutes")), ("standby", _("until idle server mode/restart"))])
 	config.ParentalControl.servicepinactive = ConfigYesNo(default = False)
 	config.ParentalControl.setuppinactive = ConfigYesNo(default = False)
 	config.ParentalControl.type = ConfigSelection(default = "blacklist", choices = [(LIST_WHITELIST, _("whitelist")), (LIST_BLACKLIST, _("blacklist"))])
diff --git a/lib/python/Components/UsageConfig.py b/lib/python/Components/UsageConfig.py
old mode 100644
new mode 100755
index b98be60..a00132d
--- a/lib/python/Components/UsageConfig.py
+++ b/lib/python/Components/UsageConfig.py
@@ -23,7 +23,7 @@ def InitUsageConfig():
 	config.usage.show_infobar_on_skip = ConfigYesNo(default = True)
 	config.usage.show_infobar_on_event_change = ConfigYesNo(default = True)
 	config.usage.hdd_standby = ConfigSelection(default = "600", choices = [
-		("0", _("no standby")), ("10", "10 " + _("seconds")), ("30", "30 " + _("seconds")),
+		("0", _("no idle mode")), ("10", "10 " + _("seconds")), ("30", "30 " + _("seconds")),
 		("60", "1 " + _("minute")), ("120", "2 " + _("minutes")),
 		("300", "5 " + _("minutes")), ("600", "10 " + _("minutes")), ("1200", "20 " + _("minutes")),
 		("1800", "30 " + _("minutes")), ("3600", "1 " + _("hour")), ("7200", "2 " + _("hours")),
@@ -56,12 +56,12 @@ def InitUsageConfig():
 	config.usage.on_long_powerpress = ConfigSelection(default = "show_menu", choices = [
 		("show_menu", _("show shutdown menu")),
 		("shutdown", _("immediate shutdown")),
-		("standby", _("Standby")) ] )
+		("standby", _("Idle Server Mode")) ] )
 	
 	config.usage.on_short_powerpress = ConfigSelection(default = "standby", choices = [
 		("show_menu", _("show shutdown menu")),
 		("shutdown", _("immediate shutdown")),
-		("standby", _("Standby")) ] )
+		("standby", _("Idle Server Mode")) ] )
 
 
 	config.usage.alternatives_priority = ConfigSelection(default = "0", choices = [
diff --git a/lib/python/Plugins/SystemPlugins/DeviceManager/plugin.py b/lib/python/Plugins/SystemPlugins/DeviceManager/plugin.py
index 86aa991..e702068 100755
--- a/lib/python/Plugins/SystemPlugins/DeviceManager/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/DeviceManager/plugin.py
@@ -85,7 +85,7 @@ class DeviceManagerConfiguration(Screen, ConfigListScreen):
 	def createConfigList(self):
 		self.list = []
 		self.list.append(getConfigListEntry(_("Enable mount check for HDD : "), config.plugins.devicemanager.mountcheck_enable))
-		self.list.append(getConfigListEntry(_("Harddisk standby after : "), config.usage.hdd_standby))
+		self.list.append(getConfigListEntry(_("Harddisk idle mode after : "), config.usage.hdd_standby))
 		self.list.append(getConfigListEntry(_("Mount known devices automatically : "), config.plugins.devicemanager.hotplug_enable))
 
 	def keySave(self):
diff --git a/lib/python/Plugins/SystemPlugins/Fancontrol/meta/plugin_fancontrol.xml b/lib/python/Plugins/SystemPlugins/Fancontrol/meta/plugin_fancontrol.xml
index b766e34..f208ec0 100644
--- a/lib/python/Plugins/SystemPlugins/Fancontrol/meta/plugin_fancontrol.xml
+++ b/lib/python/Plugins/SystemPlugins/Fancontrol/meta/plugin_fancontrol.xml
@@ -6,8 +6,8 @@
                     <author>ikseong</author>
                     <name>Fancontrol</name>
                     <packagename>enigma2-plugin-systemplugins-fancontrol</packagename>
-                    <shortdescription>Fan Control setting in standbymode.</shortdescription>
-                    <description>The Fan control turn on, turn off, modify fan action time on standbymode.
+                    <shortdescription>Fan Control setting in idle server mode.</shortdescription>
+                    <description>The Fan control turn on, turn off, modify fan action time on idle server mode.
                     </description>
           </info>
 	  <files type="package"> <!-- without version, without .ipk -->
diff --git a/lib/python/Plugins/SystemPlugins/Fancontrol/plugin.py b/lib/python/Plugins/SystemPlugins/Fancontrol/plugin.py
index d28fe8e..c90b6cd 100644
--- a/lib/python/Plugins/SystemPlugins/Fancontrol/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/Fancontrol/plugin.py
@@ -19,7 +19,7 @@ config.plugins.fancontrols.fanofftime = ConfigInteger(default = 60, limits = (1,
 
 class FancontrolConfiguration(Screen, ConfigListScreen):
 	skin = 	"""
-		<screen position="center,center" size="560,300" title="Standbymode Fancontrol settings" >
+		<screen position="center,center" size="560,300" title="Idle Server Mode Fancontrol settings" >
 			<ePixmap pixmap="skin_default/buttons/red.png" position="110,10" size="140,40" alphatest="on" />
 			<ePixmap pixmap="skin_default/buttons/green.png" position="310,10" size="140,40" alphatest="on" />
 
diff --git a/lib/python/Plugins/SystemPlugins/HDMICEC/components/HdmiCec.py b/lib/python/Plugins/SystemPlugins/HDMICEC/components/HdmiCec.py
index e73d9a2..8deddf1 100755
--- a/lib/python/Plugins/SystemPlugins/HDMICEC/components/HdmiCec.py
+++ b/lib/python/Plugins/SystemPlugins/HDMICEC/components/HdmiCec.py
@@ -46,8 +46,8 @@ class HdmiCec:
 			default = "wakeup,active,activevu")
 		config.hdmicec.vustandby_message = ConfigSelection(
 			choices = {
-			"vustandby": _("VU standby"),
-			"vudeepstandby": _("VU DeepStandby"),
+			"vustandby": _("VU Idle Server Mode"),
+			"vudeepstandby": _("VU Standby"),
 			"vunothing": _("Nothing"),
 			},
 			default = "vustandby")
diff --git a/lib/python/Plugins/SystemPlugins/HDMICEC/plugin.py b/lib/python/Plugins/SystemPlugins/HDMICEC/plugin.py
index 1151ec4..3db01e8 100755
--- a/lib/python/Plugins/SystemPlugins/HDMICEC/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/HDMICEC/plugin.py
@@ -77,8 +77,8 @@ class HdmiCecPlugin(Screen,ConfigListScreen):
 		self.list = []
 		self.hdmienabled = getConfigListEntry(_(_("HDMI CEC enabled:")), config.hdmicec.enabled)
 		self.hdmiactivesourcereply = getConfigListEntry(_(_("Active Source Reply On:")), config.hdmicec.active_source_reply)
-		self.hdmitvstandby = getConfigListEntry(_("VU standby => TV activity:"), config.hdmicec.standby_message)
-		self.hdmitvdeepstandby = getConfigListEntry(_("VU deepstandby => TV activity:"), config.hdmicec.deepstandby_message)
+		self.hdmitvstandby = getConfigListEntry(_("VU idle server mode => TV activity:"), config.hdmicec.standby_message)
+		self.hdmitvdeepstandby = getConfigListEntry(_("VU standby => TV activity:"), config.hdmicec.deepstandby_message)
 		self.hdmitvwakeup = getConfigListEntry(_("VU on => TV activity:"), config.hdmicec.wakeup_message)
 		self.hdmivustandby = getConfigListEntry(_("TV standby => VU+ activity:"), config.hdmicec.vustandby_message)
 		self.hdmivuwakeup = getConfigListEntry(_("TV on => VU+ activity:"), config.hdmicec.vuwakeup_message)
diff --git a/lib/python/Plugins/SystemPlugins/LEDBrightnessSetup/plugin.py b/lib/python/Plugins/SystemPlugins/LEDBrightnessSetup/plugin.py
index 9d29a46..a9bc2a2 100755
--- a/lib/python/Plugins/SystemPlugins/LEDBrightnessSetup/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/LEDBrightnessSetup/plugin.py
@@ -100,7 +100,7 @@ class LEDBrightnessSetup(Screen,ConfigListScreen):
 		if self["config"].getCurrent() == self.brightness:
 			self["current_entry"].setText("Touch LED Brightness at Normal state")
 		elif self["config"].getCurrent() == self.brightness_deepstandby:
-			self["current_entry"].setText("Touch LED Brightness at Deep Standby")
+			self["current_entry"].setText("Touch LED Brightness at Standby")
 		elif self["config"].getCurrent() == self.blinkingtime:
 			self["current_entry"].setText("Touch LED Blinking time")
 		self.setCurrentValue()
@@ -127,7 +127,7 @@ class LEDBrightnessSetup(Screen,ConfigListScreen):
 	def createSetup(self):
 		self.list = []
 		self.brightness = getConfigListEntry(_("Normal state"), config.plugins.brightnesssetup.brightness)
-		self.brightness_deepstandby = getConfigListEntry(_("Deep Standby"), config.plugins.brightnesssetup.brightnessdeepstandby)
+		self.brightness_deepstandby = getConfigListEntry(_("Standby"), config.plugins.brightnesssetup.brightnessdeepstandby)
 		self.blinkingtime = getConfigListEntry(_("Blinking time"), config.plugins.brightnesssetup.blinkingtime)
 		self.list.append( self.brightness )
 		self.list.append( self.brightness_deepstandby )
diff --git a/lib/python/Plugins/SystemPlugins/ManualFancontrol/meta/plugin_manualfancontrol.xml b/lib/python/Plugins/SystemPlugins/ManualFancontrol/meta/plugin_manualfancontrol.xml
index c4e814e..7327053 100755
--- a/lib/python/Plugins/SystemPlugins/ManualFancontrol/meta/plugin_manualfancontrol.xml
+++ b/lib/python/Plugins/SystemPlugins/ManualFancontrol/meta/plugin_manualfancontrol.xml
@@ -6,8 +6,8 @@
                     <author>hschang</author>
                     <name>ManualFancontrol</name>
                     <packagename>enigma2-plugin-systemplugins-manualfancontrol</packagename>
-                    <shortdescription>Fancontrol Settings inStandby Mode</shortdescription>
-                    <description>Fancontrol Settings inStandby Mode</description>
+                    <shortdescription>Fancontrol Settings in Idle Server Mode</shortdescription>
+                    <description>Fancontrol Settings in Idle Server Mode</description>
           </info>
 
 	  <files type="package"> <!-- without version, without .ipk -->
diff --git a/lib/python/Plugins/SystemPlugins/ManualFancontrol/plugin.py b/lib/python/Plugins/SystemPlugins/ManualFancontrol/plugin.py
index f2da601..61ffa88 100755
--- a/lib/python/Plugins/SystemPlugins/ManualFancontrol/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/ManualFancontrol/plugin.py
@@ -11,7 +11,7 @@ from enigma import eTimer
 
 class ManualFancontrol(Screen,ConfigListScreen):
 	skin = 	"""
-		<screen position="center,center" size="400,270" title="Fancontrol Settings in Standby mode" >
+		<screen position="center,center" size="400,270" title="Fancontrol Settings in Idle Server Mode" >
 			<ePixmap pixmap="skin_default/buttons/red.png" position="30,10" size="140,40" alphatest="on" />
 			<ePixmap pixmap="skin_default/buttons/green.png" position="230,10" size="140,40" alphatest="on" />
 
@@ -92,7 +92,7 @@ class ManualFancontrol(Screen,ConfigListScreen):
 		self["config"].l.setList(self.list)
 
 	def configSetup(self):
-		self.standbyEntry = getConfigListEntry(_("FanOFF InStanby"), config.plugins.manualfancontrols.standbymode)
+		self.standbyEntry = getConfigListEntry(_("FanOFF in Idle Server Mode"), config.plugins.manualfancontrols.standbymode)
 		self.pwmEntry = getConfigListEntry(_("PWM value"), config.plugins.manualfancontrols.pwmvalue)
 		self.periodEntry = getConfigListEntry(_("Status Check Period"), config.plugins.manualfancontrols.checkperiod)
 		if not self.displayCurrentValue in self["config"].onSelectionChanged:
@@ -139,4 +139,4 @@ def main(session, **kwargs):
 	session.open(ManualFancontrol)
 
 def Plugins(**kwargs):
-	return [PluginDescriptor(name=_("Manual Fan control"), description="setup Fancontol inStandby mode", where = PluginDescriptor.WHERE_PLUGINMENU, needsRestart = True, fnc=main)]
+	return [PluginDescriptor(name=_("Manual Fan control"), description="setup Fancontol in idle server mode", where = PluginDescriptor.WHERE_PLUGINMENU, needsRestart = True, fnc=main)]
diff --git a/lib/python/Plugins/SystemPlugins/TempFanControl/plugin.py b/lib/python/Plugins/SystemPlugins/TempFanControl/plugin.py
index 48f871f..d2588ec 100644
--- a/lib/python/Plugins/SystemPlugins/TempFanControl/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/TempFanControl/plugin.py
@@ -125,8 +125,8 @@ class TempFanControl(Screen, ConfigListScreen):
 		for count in range(fancontrol.getFanCount()):
 			self.list.append(getConfigListEntry(_("Fan %d Voltage") % (count + 1), fancontrol.getConfig(count).vlt))
 			self.list.append(getConfigListEntry(_("Fan %d PWM") % (count + 1), fancontrol.getConfig(count).pwm))
-			self.list.append(getConfigListEntry(_("Standby Fan %d Voltage") % (count + 1), fancontrol.getConfig(count).vlt_standby))
-			self.list.append(getConfigListEntry(_("Standby Fan %d PWM") % (count + 1), fancontrol.getConfig(count).pwm_standby))
+			self.list.append(getConfigListEntry(_("Idle Server Mode Fan %d Voltage") % (count + 1), fancontrol.getConfig(count).vlt_standby))
+			self.list.append(getConfigListEntry(_("Idle Server Mode Fan %d PWM") % (count + 1), fancontrol.getConfig(count).pwm_standby))
 		
 		ConfigListScreen.__init__(self, self.list, session = self.session)
 		#self["config"].list = self.list
diff --git a/lib/python/Plugins/SystemPlugins/WOLSetup/plugin.py b/lib/python/Plugins/SystemPlugins/WOLSetup/plugin.py
index bf29218..1acc43d 100644
--- a/lib/python/Plugins/SystemPlugins/WOLSetup/plugin.py
+++ b/lib/python/Plugins/SystemPlugins/WOLSetup/plugin.py
@@ -27,7 +27,7 @@ _ethDevice = "eth0"
 
 config.plugins.wolconfig = ConfigSubsection()
 config.plugins.wolconfig.activate = ConfigYesNo(default = False)
-config.plugins.wolconfig.location = ConfigSelection(default = "menu", choices = [("menu", _("Show on the Standby Menu")), ("deepstandby", _("Run at the Deep Standby"))])
+config.plugins.wolconfig.location = ConfigSelection(default = "menu", choices = [("menu", _("Show on the Standby Menu")), ("deepstandby", _("Run at the Standby"))])
 
 import socket
 class NetTool:
@@ -189,7 +189,7 @@ def MenuSelected(selected, **kwargs):
 	if selected == "system":
 		return [(_("WakeOnLan Setup"), PluginMain, "wolconfig", 80)]
 	if selected == "shutdown" and config.plugins.wolconfig.activate.value and config.plugins.wolconfig.location.value == "menu":
-		return [(_("Deep Standby with WOL"), DeepStandbyWOLMain, "deep_standby_wol", 80)]
+		return [(_("Standby with WOL"), DeepStandbyWOLMain, "deep_standby_wol", 80)]
 	return []
 
 def Plugins(**kwargs):
diff --git a/lib/python/Screens/SleepTimerEdit.py b/lib/python/Screens/SleepTimerEdit.py
index 1305b62..9f30c2d 100755
--- a/lib/python/Screens/SleepTimerEdit.py
+++ b/lib/python/Screens/SleepTimerEdit.py
@@ -79,12 +79,12 @@ class SleepTimerEdit(Screen):
 		
 		if config.SleepTimer.action.value == "shutdown":
 			if SystemInfo["DeepstandbySupport"]:
-				shutdownString = _("Deep Standby")
+				shutdownString = _("Standby")
 			else:
 				shutdownString = _("Shutdown")
 			self["green_text"].setText(_("Sleep timer action:") + " " + shutdownString)
 		elif config.SleepTimer.action.value == "standby":
-			self["green_text"].setText(_("Sleep timer action:") + " " + _("Standby"))
+			self["green_text"].setText(_("Sleep timer action:") + " " + _("Idle Server Mode"))
 		
 		if config.SleepTimer.ask.value:
 			self["yellow_text"].setText(_("Ask before shutdown:") + " " + _("yes"))
diff --git a/lib/python/Screens/TaskView.py b/lib/python/Screens/TaskView.py
index dafc263..ad0157c 100755
--- a/lib/python/Screens/TaskView.py
+++ b/lib/python/Screens/TaskView.py
@@ -46,10 +46,10 @@ class JobView(InfoBarNotifications, Screen, ConfigListScreen):
 
 		self.settings = ConfigSubsection()
 		if SystemInfo["DeepstandbySupport"]:
-			shutdownString = _("go to deep standby")
+			shutdownString = _("go to standby")
 		else:
 			shutdownString = _("shut down")
-		self.settings.afterEvent = ConfigSelection(choices = [("nothing", _("do nothing")), ("close", _("Close")), ("standby", _("go to standby")), ("deepstandby", shutdownString)], default = self.job.afterEvent or "nothing")
+		self.settings.afterEvent = ConfigSelection(choices = [("nothing", _("do nothing")), ("close", _("Close")), ("standby", _("go to idle server mode")), ("deepstandby", shutdownString)], default = self.job.afterEvent or "nothing")
 		self.job.afterEvent = self.settings.afterEvent.getValue()
 		self.afterEventChangeable = afterEventChangeable
 		self.setupList()
@@ -129,7 +129,7 @@ class JobView(InfoBarNotifications, Screen, ConfigListScreen):
 				Notifications.AddNotificationWithCallback(self.sendTryQuitMainloopNotification, MessageBox, _("A sleep timer wants to shut down\nyour STB. Shutdown now?"), timeout = 20)
 		elif self.settings.afterEvent.getValue() == "standby":
 			if not Screens.Standby.inStandby:
-				Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A sleep timer wants to set your\nSTB to standby. Do that now?"), timeout = 20)
+				Notifications.AddNotificationWithCallback(self.sendStandbyNotification, MessageBox, _("A sleep timer wants to set your\nSTB to idle server mode. Do that now?"), timeout = 20)
 
 	def checkNotifications(self):
 		InfoBarNotifications.checkNotifications(self)
diff --git a/lib/python/Screens/TimerEntry.py b/lib/python/Screens/TimerEntry.py
index 9885e70..c3e71c7 100644
--- a/lib/python/Screens/TimerEntry.py
+++ b/lib/python/Screens/TimerEntry.py
@@ -96,10 +96,10 @@ class TimerEntry(Screen, ConfigListScreen):
 
 			self.timerentry_justplay = ConfigSelection(choices = [("zap", _("zap")), ("record", _("record"))], default = {0: "record", 1: "zap"}[justplay])
 			if SystemInfo["DeepstandbySupport"]:
-				shutdownString = _("go to deep standby")
+				shutdownString = _("go to standby")
 			else:
 				shutdownString = _("shut down")
-			self.timerentry_afterevent = ConfigSelection(choices = [("nothing", _("do nothing")), ("standby", _("go to standby")), ("deepstandby", shutdownString), ("auto", _("auto"))], default = afterevent)
+			self.timerentry_afterevent = ConfigSelection(choices = [("nothing", _("do nothing")), ("standby", _("go to idle server mode")), ("deepstandby", shutdownString), ("auto", _("auto"))], default = afterevent)
 			self.timerentry_type = ConfigSelection(choices = [("once",_("once")), ("repeated", _("repeated"))], default = type)
 			self.timerentry_name = ConfigText(default = self.timer.name, visible_width = 50, fixed_size = False)
 			self.timerentry_description = ConfigText(default = self.timer.description, visible_width = 50, fixed_size = False)
diff --git a/po/en.po b/po/en.po
index 6937349..4ce5bad 100755
--- a/po/en.po
+++ b/po/en.po
@@ -445,6 +445,14 @@ msgstr ""
 
 #
 msgid ""
+"A finished record timer wants to set your\n"
+"Dreambox to idle server mode. Do that now?"
+msgstr ""
+"A finished record timer wants to set your\n"
+"Dreambox to idle server mode. Do that now?"
+
+#
+msgid ""
 "A finished record timer wants to shut down\n"
 "your Dreambox. Shutdown now?"
 msgstr ""
@@ -549,6 +557,22 @@ msgstr ""
 
 #
 msgid ""
+"A sleep timer wants to set your\n"
+"Dreambox to idle server mode. Do that now?"
+msgstr ""
+"A sleep timer wants to set your\n"
+"Dreambox to idle server mode. Do that now?"
+
+#
+msgid ""
+"A sleep timer wants to set your\n"
+"Dreambox to idle server mode.. Do that now?"
+msgstr ""
+"A sleep timer wants to set your\n"
+"Dreambox to idle server mode.. Do that now?"
+
+#
+msgid ""
 "A sleep timer wants to shut down\n"
 "your Dreambox. Shutdown now?"
 msgstr ""
@@ -3392,6 +3416,21 @@ msgstr "ISO path"
 msgid "Icelandic"
 msgstr "Icelandic"
 
+#
+msgid "Idle Server Mode"
+msgstr "Idle Server Mode"
+
+#
+#, python-format
+msgid "Idle Server Mode Fan %d PWM"
+msgstr "Idle Server Mode Fan %d PWM"
+
+#
+#, python-format
+msgid "Idle Server Mode Fan %d Voltage"
+msgstr "Idle Server Mode Fan %d Voltage"
+
+
 msgid ""
 "If a timer conflict occurs, AutoTimer will search outside the timespan for a "
 "similar event and add it."
@@ -9935,6 +9974,10 @@ msgid "go to standby"
 msgstr "go to standby"
 
 #
+msgid "go to idle server mode"
+msgstr "go to idle server mode"
+
+#
 msgid "grab this frame as bitmap"
 msgstr "grab this frame as bitmap"
 
@@ -10648,6 +10691,10 @@ msgid "until standby/restart"
 msgstr "until standby/restart"
 
 #
+msgid "until idle server mode/restart"
+msgstr "until idle server mode/restart"
+
+#
 msgid "use as HDD replacement"
 msgstr "use as HDD replacement"
 
